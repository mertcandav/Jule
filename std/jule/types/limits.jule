// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Maximum positive value of 32-bit floating-points.
const MaxF32 = 0x1p127 * (1 + (1 - 0x1p-23))

// Maximum negative value of 32-bit floating-points.
const MinF32 = -0x1p127 * (1 + (1 - 0x1p-23))

// The smallest positive non-zero value representable by the 32-bit floating-points.
const SmallestNonZeroF32 = 0x1p-126 * 0x1p-23

// Maximum positive value of 64-bit floating-points.
const MaxF64 = 0x1p1023 * (1 + (1 - 0x1p-52))

// Maximum negative value of 64-bit floating-points.
const MinF64 = -0x1p1023 * (1 + (1 - 0x1p-52))

// The smallest positive non-zero value representable by the 64-bit floating-points.
const SmallestNonZeroF64 = 0x1p-1022 * 0x1p-52

// Maximum positive value of 8-bit signed integers.
const MaxI8 = 127

// Maximum negative value of 8-bit signed integers.
const MinI8 = -128

// Maximum positive value of 16-bit signed integers.
const MaxI16 = 32767

// Maximum negative value of 16-bit signed integers.
const MinI16 = -32768

// Maximum positive value of 32-bit signed integers.
const MaxI32 = 2147483647

// Maximum negative value of 32-bit signed integers.
const MinI32 = -2147483648

// Maximum positive value of 64-bit signed integers.
const MaxI64 = 9223372036854775807

// Maximum negative value of 64-bit signed integers.
const MinI64 = -9223372036854775808

// Maximum value of 8-bit unsigned integers.
const MaxU8 = 255

// Maximum value of 16-bit unsigned integers.
const MaxU16 = 65535

// Maximum value of 32-bit unsigned integers.
const MaxU32 = 4294967295

// Maximum value of 64-bit unsigned integers.
const MaxU64 = 18446744073709551615

// Returns minimum value of signed integer kinds.
// Returns 0 if kind iss invalid.
fn MinI(mut k: str): i64 {
    k = RealKindOf(k)
    match k {
    | TypeKind.I8:
        ret MinI8
    | TypeKind.I16:
        ret MinI16
    | TypeKind.I32:
        ret MinI32
    | TypeKind.I64:
        ret MinI64
    |:
        ret 0
    }
}

// Returns minimum value of signed integer kinds.
// Returns 0 if kind is invalid.
fn MaxI(mut k: str): i64 {
    k = RealKindOf(k)
    match k {
    | TypeKind.I8:
        ret MaxI8
    | TypeKind.I16:
        ret MaxI16
    | TypeKind.I32:
        ret MaxI32
    | TypeKind.I64:
        ret MaxI64
    |:
        ret 0
    }
}

// Returns maximum value of unsigned integer kinds.
// Returns 0 if kind is invalid.
fn MaxU(mut k: str): u64 {
    k = RealKindOf(k)
    match k {
    | TypeKind.U8:
        ret MaxU8
    | TypeKind.U16:
        ret MaxU16
    | TypeKind.U32:
        ret MaxU32
    | TypeKind.U64:
        ret MaxU64
    |:
        ret 0
    }
}

// Returns minimum value of signed/unsigned integer and floating-point kinds.
// Returns 0 if kind is invalid.
fn Min(mut k: str): f64 {
    k = RealKindOf(k)
    let i = MinI(k)
    if i != 0 {
        ret f64(i)
    }
    match k {
    | TypeKind.F32:
        ret MinF32
    | TypeKind.F64:
        ret MinF64
    |:
        ret 0
    }
}

// Returns maximum value of signed/unsigned integer and floating-point kinds.
// Returns 0 if kind is invalid.
fn Max(mut k: str): f64 {
    k = RealKindOf(k)
    let i = MaxI(k)
    if i != 0 {
        ret f64(i)
    }
    let u = MaxU(k)
    if u != 0 {
        ret f64(u)
    }
    match k {
    | TypeKind.F32:
        ret MaxF32
    | TypeKind.F64:
        ret MaxF64
    |:
        ret 0
    }
}