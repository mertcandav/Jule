// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

use std::jule::lex::{Token, TokenId, TokenKind, Ident}

// Type of AST Node's data.
enum NodeData: type {
    &EnumDecl,
    &TypeEnumDecl,
    &FnDecl,
    &StructDecl,
    &TraitDecl,
    &TypeAliasDecl,
    &VarDecl,
    &Impl,
}

// AST Node.
struct Node {
    Token: &Token
    Data:  NodeData
}

// Directive.
struct Directive {
    Tag:  &Token
    Args: []&Token
}

// Kind type of type declarations.
enum TypeDeclKind: type {
    &IdentTypeDecl,
    &SubIdentTypeDecl,
    &SptrTypeDecl,
    &PtrTypeDecl,
    &SlcTypeDecl,
    &ArrTypeDecl,
    &MapTypeDecl,
    &TupleTypeDecl,
    &FnDecl,
    &NamespaceTypeDecl,
}

// Type declaration.
// Also represents type expression.
//
// For primitive types:
//  - Represented by IdentTypeDecl.
//  - Token's identity is data type.
//  - Primitive type kind is Ident.
//
// For function types:
//  - Function types represented by &FnDecl.
struct TypeDecl {
    Token: &Token
    Kind:  TypeDeclKind
}

// Identifier type.
struct IdentTypeDecl {
    Token:     &Token
    Ident:     str
    CppLinked: bool
    Generics:  []&TypeDecl
}

impl IdentTypeDecl {
    // Reports whether identifier is primitive type.
    fn IsPrim(self): bool {
        ret self.Token.Id == TokenId.Prim
    }
}

// Sub-identifier type.
struct SubIdentTypeDecl {
    Idents: []&IdentTypeDecl
}

// Namespace chain type.
struct NamespaceTypeDecl {
    Idents: []&Token  // Namespace chain with identifier tokens.
    Kind:   &TypeDecl // Type of identifier.
}

// Smart pointer type.
struct SptrTypeDecl {
    Elem: &TypeDecl
}

// Slice type.
struct SlcTypeDecl {
    Elem: &TypeDecl
}

// Tuple type.
struct TupleTypeDecl {
    Types: []&TypeDecl
}

// Pointer type.
struct PtrTypeDecl {
    Elem: &TypeDecl
}

impl PtrTypeDecl {
    // Reports whether pointer is unsafe pointer (*unsafe).
    fn IsUnsafe(self): bool {
        ret self.Elem == nil
    }
}

// Array type.
// Size epxression is nil for auto-sized array.
struct ArrTypeDecl {
    Elem: &TypeDecl
    Size: &Expr
}

impl ArrTypeDecl {
    // Reports whether array is auto-sized.
    fn AutoSized(self): bool {
        ret self.Size == nil
    }
}

// Map type.
struct MapTypeDecl {
    Key: &TypeDecl
    Val: &TypeDecl
}

// Return type.
// Kind and Idents is nil for void type.
struct RetTypeDecl {
    Kind:   &TypeDecl
    Idents: []&Token
}

// Type of Expr's data.
enum ExprData: type {
    &RangeExpr,
    &TupleExpr,
    &LitExpr,
    &TypeDecl,
    &IdentExpr,
    &UnaryExpr,
    &SubIdentExpr,
    &NsSelectionExpr,
    &VariadicExpr,
    &CastExpr,
    &FnCallExpr,
    &StructLit,
    &BraceLit,
    &SlicingExpr,
    &SliceExpr,
    &BinopExpr,
    &UnsafeExpr,
    &IndexingExpr,
    &FnDecl,
    &FieldExprPair,
    &KeyValPair,
}

// Expression.
struct Expr {
    Token: &Token
    End:   &Token
    Kind:  ExprData
}

// Range expression between parentheses.
struct RangeExpr {
    Expr: &Expr
}

// Use expression.
struct UseExpr {
    Token: &Token
    Expr:  &Expr
}

// Tuple expression.
struct TupleExpr {
    Expr: []&Expr
}

// Literal expression.
struct LitExpr {
    Token: &Token
    Value: str
}

impl LitExpr {
    // Reports whether literal is nil value.
    fn IsNil(self): bool {
        ret self.Value == TokenKind.Nil
    }
}

// Unsafe expression.
struct UnsafeExpr {
    Token: &Token // Token of unsafe keyword.
    Expr:  &Expr
}

// Identifier expression.
struct IdentExpr {
    Token:     &Token // Token of identifier.
    Ident:     str
    CppLinked: bool
}

impl IdentExpr {
    // Reports whether identifier is self keyword.
    fn IsSelf(self): bool {
        ret self.Ident == TokenKind.Self
    }
}

// Unary expression.
struct UnaryExpr {
    Op:   &Token
    Expr: &Expr
}

// Variadiced expression.
struct VariadicExpr {
    Token: &Token
    Expr:  &Expr
}

// Casting expression.
struct CastExpr {
    Kind: &TypeDecl
    Expr: &Expr
}

// Namespace identifier selection expression.
struct NsSelectionExpr {
    Ns:    []&Token // Tokens of selected namespace identifier chain.
    Ident: &Token   // Token of selected identifier.
}

// Object sub identifier selection expression.
struct SubIdentExpr {
    IsSelf: bool   // True if root selector is "self" keyword.
    Expr:   &Expr  // Selected object.
    Ident:  &Token // TOken of selected identifier.
}

// Binary operation.
struct BinopExpr {
    Left:  &Expr
    Right: &Expr
    Op:    &Token
}

// Function call expression kind.
struct FnCallExpr {
    Token:     &Token
    Expr:      &Expr
    Args:      []&Expr
    Exception: &ScopeTree // Exception handling scope.
    IsCo:      bool
}

impl FnCallExpr {
    // Reports whether exception is not handled.
    fn Unhandled(self): bool {
        ret self.Exception == nil
    }

    // Reports whether exception is ignored.
    fn Ignored(self): bool {
        // Return true if deferred field is true.
        // Deferred field used mark for exception ignored calls like: x()!
        ret self.Exception != nil && self.Exception.Deferred
    }
}

// Field-Expression pair.
struct FieldExprPair {
    Field: &Token // Field identifier token.
    Expr:  &Expr
}

impl FieldExprPair {
    // Reports whether pair targeted field.
    fn IsTargeted(self): bool {
        ret self.Field != nil
    }
}

// Struct literal instiating expression.
struct StructLit {
    End:   &Token
    Kind:  &TypeDecl
    Exprs: []&Expr   // Possible types: &FieldExprPair, and other expressions.
}

// Anonymous brace instiating expression.
struct BraceLit {
    Token: &Token
    End:   &Token
    Exprs: []&Expr
}

impl BraceLit {
    // Reports whether literal is empty ( {} ).
    fn IsEmpty(self): bool {
        ret len(self.Exprs) == 0
    }
}

// Key-value pair expression.
struct KeyValPair {
    Key:   &Expr
    Val:   &Expr
    Colon: &Token
}

// Slice initiating expression.
// Also represents array initiating expression.
struct SliceExpr {
    Token: &Token
    End:   &Token
    Exprs: []&Expr
}

impl SliceExpr {
    // Reports whether slice is empty.
    fn IsEmpty(self): bool {
        ret len(self.Exprs) == 0
    }
}

// Indexing expression.
struct IndexingExpr {
    Token: &Token
    End:   &Token
    Expr:  &Expr  // Value expression to indexing.
    Index: &Expr  // Index value expression.
}

// Slicing expression.
struct SlicingExpr {
    Token: &Token
    End:   &Token
    Expr:  &Expr  // Value expression to slicing.
    Start: &Expr  // Start index value expression.
    To:    &Expr  // To index value expression.
}

// Constraint.
struct Constraint {
    Mask: []&TypeDecl
}

// Generic type declaration.
struct GenericDecl {
    Token:      &Token
    Ident:      str
    Constraint: &Constraint
}

// Label statement.
struct LabelSt {
    Token: &Token
    Ident: str
}

// Goto statement.
struct GotoSt {
    Token: &Token
    Label: &Token
}

// Fall statement.
struct FallSt {
    Token: &Token
}

// Left expression of assign statement.
struct AssignLeft {
    Token:     &Token
    Mutable:   bool
    Reference: bool
    Ident:     str
    Expr:      &Expr
}

// Assign statement.
struct AssignSt {
    Declarative: bool
    Setter:      &Token
    Left:        []&AssignLeft
    Right:       &Expr
}

// Type of Stmt's data.
enum StmtData: type {
    &VarDecl,
    &RetSt,
    &GotoSt,
    &BreakSt,
    &ContSt,
    &Expr,
    &Conditional,
    &MatchCase,
    &Iter,
    &AssignSt,
    &FallSt,
    &LabelSt,
    &ScopeTree,
    &TypeAliasDecl,
    &UseExpr,
}

// Statement.
struct Stmt {
    Token: &Token
    Data:  StmtData
}

// Scope tree.
struct ScopeTree {
    Parent:   &ScopeTree // Nil if scope is root.
    Unsafety: bool
    Deferred: bool
    Stmts:    []Stmt
    End:      &Token
}

// Parameter.
struct ParamDecl {
    Token:     &Token
    Mutable:   bool
    Variadic:  bool
    Reference: bool
    Kind:      &TypeDecl
    Ident:     str
}

impl ParamDecl {
    // Reports whether parameter is self (receiver) parameter.
    fn IsSelf(self): bool {
        ret self.Ident == "&self" || self.Ident == "self"
    }

    // Reports whether self (receiver) parameter is reference.
    fn IsRef(self): bool {
        ret self.Ident != "" && self.Ident[0] == '&'
    }
}

// Function declaration.
// Also represents anonymous function expression.
struct FnDecl {
    Token:       &Token
    Global:      bool
    Unsafety:    bool
    Public:      bool
    CppLinked:   bool
    Statically:  bool
    Exceptional: bool
    Ident:       str
    Directives:  []&Directive
    Scope:       &ScopeTree
    Generics:    []&GenericDecl
    Result:      &RetTypeDecl
    Params:      []&ParamDecl
}

impl FnDecl {
    // Reports whether function is anonymous.
    fn IsAnon(self): bool {
        ret self.Ident == Ident.Anon
    }
}

// Variable declaration.
struct VarDecl {
    Scope:      &ScopeTree   // nil for global scopes
    Token:      &Token
    Ident:      str
    CppLinked:  bool
    Public:     bool
    Mutable:    bool
    Constant:   bool
    Statically: bool
    Reference:  bool
    Directives: []&Directive
    Kind:       &TypeDecl    // nil for type inferred
    Expr:       &Expr
}

// Return statement.
struct RetSt {
    Token: &Token
    Expr:  &Expr
}

// Type of Iter's kind.
enum IterKind: type {
    &WhileKind,
    &RangeKind,
}

// Iteration.
struct Iter {
    Token: &Token
    Kind:  IterKind
    Scope: &ScopeTree
}

impl Iter {
    // Reports whether iteration is infinity.
    fn IsInf(self): bool { ret self.Kind == nil }
}

// While iteration kind.
struct WhileKind {
    Expr:      &Expr
    Next:      StmtData // Nil if kind is while-next iteration.
    NextToken: &Token
}

impl WhileKind {
    // Reports whether kind is while-next iteration.
    fn IsWhileNext(self): bool {
        ret self.Next != nil
    }
}

// Range iteration kind.
struct RangeKind {
    InToken: &Token   // Token of "in" keyword
    Expr:    &Expr
    KeyA:    &VarDecl // first key of range
    KeyB:    &VarDecl // second key of range
}

// Break statement.
struct BreakSt {
    Token: &Token
    Label: &Token
}

// Continue statement.
struct ContSt {
    Token: &Token
    Label: &Token
}

// If condition.
struct If {
    Token: &Token
    Expr:  &Expr
    Scope: &ScopeTree
}

// Else condition.
struct Else {
    Token: &Token
    Scope: &ScopeTree
}

// Condition chain.
struct Conditional {
    Head:    &If
    Tail:    []&If
    Default: &Else
}

// Type alias declaration.
struct TypeAliasDecl {
    Scope:     &ScopeTree
    Public:    bool
    CppLinked: bool
    Token:     &Token
    Ident:     str
    Kind:      &TypeDecl
}

// Case of match-case.
struct Case {
    Token: &Token
    Scope: &ScopeTree

    // Holds expression.
    // Expressions holds *Type if If type matching.
    Exprs: []&Expr
}

// Match-Case.
struct MatchCase {
    Token:     &Token
    End:       &Token
    TypeMatch: bool
    Expr:      &Expr
    Cases:     []&Case
    Default:   &Else
}

// Use declaration statement.
struct UseDecl {
    Token:     &Token
    LinkPath:  str      // Use declaration path string.
    Alias:     str
    Full:      bool     // Full implicit import.
    Selected:  []&Token
    CppLinked: bool     // Cpp header use declaration.
    Std:       bool     // Standard package use declaration.
}

// Enum item.
struct EnumItemDecl {
    Token: &Token
    Ident: str
    Expr:  &Expr  // Nil for auto expression.
}

impl EnumItemDecl {
    // Reports whether item has auto expression.
    fn AutoExpr(self): bool {
        ret self.Expr == nil
    }
}

// Enum declaration.
struct EnumDecl {
    Token:  &Token
    Public: bool
    Ident:  str
    Kind:   &TypeDecl
    Items:  []&EnumItemDecl
    End:    &Token
}

impl EnumDecl {
    // Reports whether enum's type is default.
    fn DefaultTyped(self): bool {
        ret self.Kind == nil
    }
}

// TypeEnum item.
struct TypeEnumItemDecl {
    Token: &Token
    Ident: str
    Kind:  &TypeDecl
}

// TypeEnum declaration.
struct TypeEnumDecl {
    Token:  &Token
    Public: bool
    Ident:  str
    Items:  []&TypeEnumItemDecl
    End:    &Token
}

// Field declaration.
struct FieldDecl {
    Token:   &Token
    Public:  bool
    Mutable: bool      // Interior mutability.
    Ident:   str
    Kind:    &TypeDecl
    Default: &Expr     // Nil if not given.
}

// Structure declaration.
struct StructDecl {
    Token:      &Token
    End:        &Token
    Ident:      str
    Fields:     []&FieldDecl
    Public:     bool
    CppLinked:  bool
    Directives: []&Directive
    Generics:   []&GenericDecl
}

// Trait declaration.
struct TraitDecl {
    Token:    &Token
    End:      &Token
    Ident:    str
    Public:   bool
    Inherits: []&TypeDecl
    Methods:  []&FnDecl
}

// Implementation.
struct Impl {
    End: &Token

    // This token available for these cases:
    //  - Implementation trait to structure, represents trait's type.
    Base: &TypeDecl

    // This token available for these cases:
    //  - Implementation trait to structure, represents structure's type.
    //  - Implementation to structure, represents structure's type.
    Dest: &TypeDecl

    // Given methods to implement.
    Methods: []&FnDecl

    // Static variables to implement.
    Statics: []&VarDecl
}

impl Impl {
    // Reports whether implementation type is trait to structure.
    fn IsTraitImpl(self): bool {
        ret self.Base != nil
    }

    // Reports whether implementation type is append to destination structure.
    fn IsStructImpl(self): bool {
        ret self.Base == nil
    }
}