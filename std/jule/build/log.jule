// Copyright 2023-2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Compiler log messages with formatting.
enum LogMsg: str {
    Empty: "",
    StdlibNotExist: `standard library directory not found`,
    FileNotUseable: `file is not useable for this operating system or architecture`,
    FileNotJule: `this is not jule source file: @`,
    NoEntryPoint: `missing entry point: entry point (main) function is not defined`,
    DuplicatedIdent: `identifier "@" is duplicated for scope, used by another declaration`,
    ExtraClosedParent: `extra closed parentheses`,
    ExtraClosedBrace: `extra closed braces`,
    ExtraClosedBracket: `extra closed brackets`,
    WaitCloseParent: `parentheses waiting to close`,
    WaitCloseBrace: `brace waiting to close`,
    WaitCloseBracket: `bracket are waiting to close`,
    ExpectedParentClose: `was expected parentheses close`,
    ExpectedBraceClose: `was expected brace close`,
    ExpectedBracketClose: `was expected bracket close`,
    BodyNotExist: `body is not exist`,
    OperatorOverflow: `operator overflow: repetitive operators`,
    IncompatibleTypes: `mismatched types: @ and @`,
    OperatorNotForJuleType: `operator @ is not defined for type @`,
    OperatorNotForFloat: `operator @ is not defined for floating-point type(s)`,
    OperatorNotForInt: `operator @ is not defined for integer type(s)`,
    OperatorNotForUint: `operator @ is not defined for unsigned integer type(s)`,
    IdentNotExist: `undefined identifier: @`,
    NotFnCall: `value is not function`,
    ArgumentOverflow: `argument overflow: passed more argument than expected to call @`,
    FnHaveRet: `function @ cannot have return type`,
    FnHaveParameters: `function @ cannot have parameter(s)`,
    RequireRetExpr: `return statements of non-void functions should have return expression`,
    VoidFnRetExpr: `void functions is cannot returns any value`,
    BitShiftMustUnsigned: `bit shifting value is must be unsigned`,
    LogicalNotBool: `logical expression is have only boolean type values`,
    AssignConst: `constants is can't assign`,
    AssignRequireLvalue: `invalid expression: expected lvalue for assignment`,
    AssignTypeNotSupportValue: `type is not support assignment`,
    InvalidToken: `undefined token: @`,
    InvalidSyntax: `invalid syntax`,
    InvalidType: `invalid type`,
    InvalidNumericRange: `arithmetic value overflow: this value too big`,
    InvalidExprForUnary: `unary operator @ is not defined for type @`,
    InvalidEscapeSeq: `invalid escape sequence`,
    InvalidTypeSource: `invalid type source`,
    InvalidTypeForConst: `@ is invalid data-type for constant`,
    InvalidExpr: `invalid expression`,
    InvalidCppExt: `invalid C++ extension: @`,
    InvalidLabel: `invalid label: @`,
    InvalidExprForTypeInference: `invalid expression for type inference`,
    MissingValueForTypeInference: `type inferred declarations should have a initializer expression`,
    MissingType: `type missing`,
    MissingExpr: `expression missing`,
    MissingBlockCommentClose: `missing block comment close`,
    MissingRuneEnd: `rune is not finished`,
    MissingRet: `missing return at end of function`,
    MissingStrEnd: `string is not finished`,
    MissingMultiRet: `missing return expressions for multi-return`,
    MissingMultiAssignIdents: `missing identifier(s) for multiple assignment`,
    MissingUsePath: `missing path of use statement`,
    MissingGotoLabel: `missing label identifier for goto statement`,
    MissingExprFor: `missing expression for @`,
    MissingGenerics: `missing generics`,
    MissingReceiver: `missing receiver parameter`,
    MissingFnParentheses: `missing function parentheses`,
    ExprNotConst: `expressions is not constant expression`,
    NilForTypeInference: `nil is cannot use with type inferred definitions`,
    VoidForTypeInference: `void data is cannot use for type inferred definitions`,
    RuneEmpty: `rune is cannot empty`,
    RuneOverflow: `rune is should be single`,
    NotSupportsIndexing: `type @ is not support indexing`,
    NotSupportsSlicing: `type @ is not support slicing`,
    AlreadyConst: `define is already constant`,
    AlreadyVariadic: `define is already variadic`,
    AlreadyReference: `define is already reference`,
    DuplicateUseDecl: `use declaration duplication: @ is already used above`,
    IgnoreIdent: `ignore operator cannot use as identifier for this declaration`,
    OverflowMultiAssignIdents: `overflow multi assignment identifers`,
    OverflowRet: `overflow return expressions`,
    BreakAtOutOfValidScope: `break keyword is cannot used at out of iteration and match cases`,
    ContinueAtOutOfValidScope: `continue keyword is cannot used at out of iteration`,
    IterWhileRequireBoolExpr: `while iterations must be have boolean expression`,
    IterRangeRequireEnumerableExpr: `range iterations must be have enumerable expression`,
    MuchRangeVars: `range variables can be maximum two`,
    IfRequireBoolExpr: `if conditions must be have boolean expression`,
    ElseHaveExpr: `else's cannot have any expression`,
    VariadicParamNotLast: `variadic parameter can only be last parameter`,
    VariadicWithNonVariadicable: `type @ is not variadicable`,
    MoreArgsWithVariadiced: `variadic argument can't use with more argument`,
    TypeNotSupportsCasting: `type @ not supports casting`,
    TypeNotSupportsCastingTo: `type @ not supports casting to type @`,
    UseAtContent: `use declaration must be start of source code`,
    UseNotFound: `used directory path not found/access: @`,
    DefNotSupportPub: `define is not supports modifier`,
    ObjNotSupportSubFields: `object @ is not supports sub-defines`,
    ObjHaveNotIdent: `undefined identifier: type @ has no field or method @`,
    TypeNotSupportSubFields: `type @ is not supports sub-defines`,
    TypeHaveNotIdent: `undefined identifier: type @ has no field or method @`,
    DeclaredButNotUsed: `@ declared but not used`,
    ExprNotFnCall: `statement must have function call expression`,
    LabelExist: `label is already exist in this identifier: @`,
    LabelNotExist: `not exist any label in this identifier: @`,
    GotoJumpsDeclarations: `goto @ jumps over declaration(s)`,
    FnNotHasParam: `function is not has parameter in this identifier: @`,
    AlreadyHasExpr: `@ already has expression`,
    ArgMustTargetToField: `argument must target to field`,
    OverflowLimits: `overflow the limit of data-type`,
    GenericsOverflow: `overflow generics`,
    HasGenerics: `define has generics`,
    NotHasGenerics: `define not has generics`,
    TypeNotSupportsGenerics: `type @ not supports generics`,
    DivByZero: `divide by zero`,
    TraitHaveNotIdent: `undefined identifier: trait @ has no define @`,
    NotImplTraitDef: `trait @ derived but not implemented define @`,
    DynamicTypeAnnotationFailed: `dynamic type annotation failed`,
    FalltroughWrongUse: `fall keyword can only useable at end of the case scopes`,
    FallthroughIntoFinalCase: `fall cannot useable at final case`,
    UnsafeBehaviorAtOutOfUnsafeScope: `unsafe behaviors cannot available out of unsafe scopes`,
    RefMethodUsedWithNotRefInstance: `reference method cannot use with non-reference instance`,
    MethodAsAnonFn: `non-static methods cannot use as anonymous function`,
    CppFnAsAnonFn: `cpp-linked functions cannot use as anonymous function`,
    GenericedFnAsAnonFn: `genericed functions cannot use as anonymous function`,
    IllegalCycleRefersItself: `illegal cycle in declaration, @ refers to itself`,
    IllegalCrossCycle: "illegal cross cycle in declarations;\n@",
    AssignToNonMut: `cannot assign to immutable storage`,
    AssignNonMutToMut: `immutable data cannot assign to mutable storage because of @ type which is mutable`,
    RetWithMutTypedNonMut: `mutable typed return expressions should be mutable`,
    MutOperationOnImmut: `mutable operation cannot used with immutable data`,
    TraitHasRefParamFn: `trait has reference receiver parameter used method, cannot assign non-reference instance`,
    EnumHaveNotField: `undefined identifier: enum @ has no field @`,
    DuplicateMatchType: `duplicated pattern: type @ is already matched`,
    CppLinkedVarHasExpr: `cpp linked variables cannot have expression`,
    CppLinkedVarIsConst: `cpp linked variables cannot be constant`,
    ConstVarNotHaveExpr: `missing expression for constant variable initialization`,
    MissingExprForUnary: `missing expression for unary operator`,
    InvalidOpForUnary: `invalid unary operator: @`,
    UseDeclAtBody: `use declarations must declared top of source code`,
    ArrayAutoSized: `array must have explicit size`,
    NamespaceNotExist: `undefined namespace: @`,
    ImplInvalidBase: `invalid base type for impl: @`,
    ImplInvalidDest: `invalid destination type for impl: @`,
    StructAlreadyHaveIdent: `identifier duplication: struct @ already have define @`,
    UnsafePtrIndexing: `unsafe pointers are not supports indexing`,
    MethodHasGenericWithSameIdent: `methods cannot have same generic identifier with owner same time`,
    TupleAssignToSingle: `tuples cannot assign to single define in same time`,
    MissingCompilePath: `missing compile path`,
    ArraySizeIsNotInt: `array size must be integer`,
    ArraySizeIsNeg: `array size must be positive integer`,
    BuiltinAsNonFn: `builtin define cannot use as anonymous function`,
    TypeCaseHasNotValidExpr: `type-match must be have <any>, <type enum>, <trait> or <generic> typed expression`,
    IllegalImplOutOfPackage: `illegal implementation via definition from out of package`,
    MethodNotInvoked: `methods should be invoked`,
    DuplicatedUseSelection: `duplicated selection: @ is already selected`,
    IdentIsNotAccessible: `inaccessible identifier: @ is private`,
    InvalidStmtForNext: `invalid statement for while-next`,
    ModuloWithNotInt: `module operator must be used with integer type`,
    PkgIllegalCycleRefersItself: `illegal cycle in use declaration, package @ refers to itself`,
    PkgIllegalCrossCycle: "illegal cross cycle in use declarations;\n@",
    RefersTo: `@ refers to @`,
    NoFileInEntryPackage: `there is no Jule source code in package: @`,
    NoMemberInEnum: `enum @ have no field`,
    TypeIsNotDerives: `type @ is not derives @`,
    TypeNotSupportsClone: `type @ is not support cloning`,
    InternalTypeNotSupportsClone: `type @ has internally types which is not supports cloning`,
    TypeNotCompatibleForDerive: `type @ is not compatible to derive @`,
    DeriveIllegalCycleRefersItself: `illegal cycle for derive @, struct @ refers to itself`,
    DeriveIllegalCrossCycle: "illegal cross cycle for derive @;\n@",
    InvalidExprForBinop: `invalid expression used for binary operation`,
    CppLinkedStructForRef: `cpp-linked structures cannot supports reference counting`,
    TraitMethodHasGenerics: `trait methods cannot have generics`,
    EnumAsMapVal: `maps do not support enums as map key type`,
    GlobalNotStatic: `global variables must be static`,
    StaticNotHaveExpr: `static variables must be have initialize expression`,
    StaticFnHasReceiver: `static functions cannot have receiver parameter`,
    RefAssignNonVar: `references requires variable for assignment`,
    MutRefPointsImmut: `mutable reference cannot point to immutable data`,
    RefNotInited: `reference variables must be have lvalue initialize expression`,
    ConstRef: `references cannot be constant`,
    RefIsDangling: `you cannot use reference variable @ because reference is dangling`,
    ConcurrentCallWithRefParam: `Safe Jule not allows to make concurrent calls with functions which is has reference parameter(s)`,
    ConcurrentCallWithSelfParam: `Safe Jule not allows to make concurrent calls with methods which is has "self" receiver parameter`,
    UsedRefInAnonFnFromParentScope: `anonymous functions cannot access to reference definition @ of parent scope`,
    EnumCastedFromAny: `enum cannot casted from any type`,
    DuplicatedUseAlias: `identifier duplication: @ is already used for another use declaration above`,
    BuiltinUsedForRef: `built-in defines cannot pass to references`,
    RefPointsToInvalidType: `references cannot points to type @`,
    DefaultNotLast: `default case should be last case`,
    TraitImplHasStatic: `trait implementations cannot implement static field`,
    IncompatibleTypeForPtrArithmetic: `type @ is incompatible to use for pointer arithmetic`,
    ComptimePanic: `compile-time panic: @`,
    InvalidTypeForIndexing: `type @ is invalid for indexing`,
    UnusedDirective: `this directive is out of scope, put it where it will be useful or delete it`,
    UnsupportedDirective: `directive @ is not supported by define`,
    PanicedWithNonStr: `panic function only accepts strings`,
    ErrorWithNonExceptional: `error call can only useable for exceptional functions`,
    CDefineExceptional: `cpp-linked defines cannot be exceptional`,
    HandledUnexceptional: `non-exceptionals cannot handled like exceptionals`,
    UnhandledExceptional: `exceptionals must be handled`,
    MissingAssignRet: `assignments requires expression`,
    CoForExceptional: `concurrent calls not supports exceptionals`,
    TypeCallWithExceptional: `exceptionals are not supported for type-cast call`,
    RetInDeferred: `deferred scopes are not supports return statements`,
    ErrorInDeferred: `deferred scopes are not supports error calls`,
    NilError: `you cannot call error function with nil`,
    UseExprOutOfScope: `use expressions cannot useable out of exceptional handler scopes`,
    UseExprInDeferred: `use expressions cannot useable in deferred scopes`,
    UseExprNotLast: `use expressions must be last statement of scope`,
    ExceptionalEntryPoint: `entry point cannot be exceptional`,
    ExceptionalInit: `initializer function cannot be exceptional`,
    AutoSizedArrFilled: `auto-sized arrays cannot filled`,
    AssignInExpr: `assignments not available for expressions`,
    UsingDeprecated: `deprecated usage: @`,
    TraitImplDeprecated: `trait implementations cannot have deprecated code`,
    AssertNonBool: `assertion requires boolean expression`,
    WrongTestFnDecl: `wrong test function declaration`,
    TestMethod: `you cannot declare test methods`,
    TestCalled: `you cannot call test functions`,
    ModuleNotFound: `no module file found in current directory or any parent directory`,
    UseDeclForInternal: `you cannot access to internal packages`,
    PubTestFn: `test function cannot be public`,
    CppLinkedTypeNotAllowed: `cpp-linked definitions are not allowed in this scope`,
    GenericsNotAllowed: `generics are not allowed in this scope`,
    InitiationCycle: `type declaration causes initiation cycle`,
    DeclFoundInsteadExpr: `expecting expression, found type declaration`,
    CallingNonFn: `attempting to call a non-function`,
    ExceptionalAtGlobalScope: `exceptionals are not allowed in global scope`,
    StructureLitWithPrivFields: `structure cannot instantiating because it has non-public fields`,
    AnyWithTypeEnum: `the <any> type is not allowed for type-enum declarations`,
    ConstraintFailed: `type @ is not matched with @'s constraint`,
    SelectedImportExistInPackage: `selected identifier "@" is already exist in this package`,
    CoForCastingCall: `concurrent calls are not allowed for type-cast calls`,
    TypeIsNotComparable: `type @ is not comparable`,
    AmperOpForEnum: `the @ enum type is not supports @ operator`,
    MissingArgs: `missing arguments to call @`,
    InheritedNonTrait: `trait @ cannot implement @, type should be trait`,
    IncompatibleInherit: "trait @ inherits trait @, but same identifiers implemented different;\n       @\n       @",

    // Suggestions.
    ExpectedIdentifier: `write an identifier because identifier expected`,
    ExpectedLabelIdent: `write a label identifier because label expected`,
    ExpectedDotForCpp: `use dot (.) to access cpp-linked defines`,
    ExpectedDblColon: `expected double colon "::"`,
    EmptyParentNotValid: `empty parentheses are not valid expression, must include an expression in range`,
    GiveExprToCast: `give an expression for casting`,
    GiveTypeForCast: `type declaration expected for casting`,
    ExpectedExpr: `an expression expected`,
    ExpectedAnonFn: `anonymous function expected, remove identifier of function`,
    ExpectedLeftOperand: `left operand expected for binary operator`,
    ExpectedRightOperand: `right operand expected for binary operator`,
    ExpectedColon: `expected colon ":"`,
    ExpectedBody: `expected a body, bodies should start in same line with their definition and declared with braces "{ }"`,
    MoveUseDeclToTopOfFile: `move this use declaration to top of source file`,
    RenameForAvoidDuplication: `rename definition to avoid duplication`,
    RemoveUseDeclAvoidDuplication: `remove this use declaration, already used, it is safe`,
    RenameUseAliasAvoidDuplication: `rename alias for this use declaration to avoid duplication`,
    RemoveUseSelectionAvoidDupliation: `remove this use selection, already selected, it is safe`,
    RemoveConstToAssign: `remove constant qualifer if you need to assign`,
    UseStaticKeywordToDef: `use "static" keyword to define`,
    RemoveFallthroughFromFinalCase: `remove "fall" keyword`,
    MakePubToAccess: `make public with "pub" keyword to access`,
    ExpressionMustBeReferenceType: `expression must be reference type`,
    CastToEnumTypeInsteadOfEnum: `try cast to type of enum fields instead of enum`,
    TryFloatingPoint: `floating-point literals may solve your problem`,
    ExpectedColonForAssign: `expected colon ":" for assignment`,
    DeclareExceptional: `you can declare an exceptional function with "!" operator`,
    HandleExceptional: `use "!" operator after exceptional to handle it`,
    HandleInFn: `handle exceptional in a separate function or anonymous function`,
    JustIgnoreOrHandle: `just ignore exceptional or handle it but you cannot do both at same time`,
    UseImperative: `use clear imperative approach, comes relevant assignment statement before the expression`,
    UseUnsafeForDeprecated: `use Unsafe Jule for deprecated codes or replace to successor`,
    UseExpectedTestFnDecl: `use expected test function declaration: fn(t: &std::testing::T)`,
    UseModInit: `use "julec mod init" command to initialize module`,
    RemovePubModifier: `remove "pub" modifier`,
    ExpectedStruct: `expected structure, use a structure`,
    ExpectedTrait: `expected trait, use a trait`,
    UseTypeMatch: `you can use type-match if you want to match types`,
    WrapExceptional: `wrap exceptional with a non-exceptional function`,
    UseFieldPairToInstantiate: `use field:expression pairs to instantiate`,
    InstantiateGenericFnToUseAsAnon: `instantiate generic function to use as anonymous function`,
    UseUnsafeJuleToCallCo: `use Unsafe Jule with unsafe {} scope to make concurrent call`,
    UseUnsafeJuleToCallCoSelf: `use "&self" receiver parameter instead, or Unsafe Jule with unsafe {} scope to make concurrent call`,
    DefineZeroDefaultToUseAmper: `define default enum field (the first one is default) with zero value to use & operator`,
}

// Log kinds.
enum LogKind {
    Flat,  // Just text.
    Error, // Error message.
}

// Compiler log.
struct Log {
    Kind:       LogKind
    Row:        int
    Column:     int
    Path:       str
    Text:       str
    Line:       str
    Suggestion: str
}

// Returns formatted error message by fmt and args.
fn Logf(fmt: LogMsg, args: ...any): str {
    ret applyFmt(fmt, args...)
}

fn argToStr(arg: any): str {
    match type arg {
    | str:
        ret str(arg)
    | byte:
        ret str(byte(arg))
    | rune:
        ret str(rune(arg))
    |:
        ret "<fmt?>"
    }
}

fn findNextFmt(fmt: str): int {
    for i, b in fmt {
        if b == '@' {
            ret i
        }
    }
    ret -1
}

fn applyFmt(mut fmt: str, args: ...any): str {
    let mut s = ""
    for _, arg in args {
        let i = findNextFmt(fmt)
        if i == -1 {
            break
        }
        s += fmt[:i]
        s += argToStr(arg)
        fmt = fmt[i+1:]
    }
    s += fmt
    ret s
}