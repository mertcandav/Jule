// Copyright 2024 The Jule Programming Language.
// Use of this source code is governed by a BSD 3-Clause
// license that can be found in the LICENSE file.

// Package byteorder provides functions for decoding and encoding
// little and big endian integer types from/to byte slices.

// The Jule code is a modified version of the original Go code from
// https://github.com/golang/go/blob/f3a743981d0af6ead0c4f64ef4c299c342bba4de/src/internal/byteorder/byteorder.go and came with this notice.
//
// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
// 
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================

fn LeU16(b: []byte): u16 {
    ret u16(b[0]) | u16(b[1])<<8
}

fn LePutU16(mut b: []byte, v: u16) {
    b[0] = byte(v)
    b[1] = byte(v >> 8)
}

fn LeAppendU16(mut b: []byte, v: u16): []byte {
    ret append(b,
        byte(v),
        byte(v>>8),
    )
}

fn LeU32(b: []byte): u32 {
    ret u32(b[3])<<24 | u32(b[2])<<16 | u32(b[1])<<8 | u32(b[0])
}

fn LePutU32(mut b: []byte, v: u32) {
    b[3] = byte(v >> 24)
    b[2] = byte(v >> 16)
    b[1] = byte(v >> 8)
    b[0] = byte(v)
}

fn LeAppendU32(mut b: []byte, v: u32): []byte {
    ret append(b,
        byte(v),
        byte(v>>8),
        byte(v>>16),
        byte(v>>24),
    )
}

fn LeU64(mut b: []byte): u64 {
    ret u64(b[7])<<56 | u64(b[6])<<48 | u64(b[5])<<40 | u64(b[4])<<32 |
        u64(b[3])<<24 | u64(b[2])<<16 | u64(b[1])<<8 | u64(b[0])
}

fn LePutU64(mut b: []byte, v: u64) {
    b[7] = byte(v >> 56)
    b[6] = byte(v >> 48)
    b[5] = byte(v >> 40)
    b[4] = byte(v >> 32)
    b[3] = byte(v >> 24)
    b[2] = byte(v >> 16)
    b[1] = byte(v >> 8)
    b[0] = byte(v)
}

fn LeAppendU64(mut b: []byte, v: u64): []byte {
    ret append(b,
        byte(v),
        byte(v>>8),
        byte(v>>16),
        byte(v>>24),
        byte(v>>32),
        byte(v>>40),
        byte(v>>48),
        byte(v>>56),
    )
}

fn BeU16(b: []byte): u16 {
    ret u16(b[1]) | u16(b[0])<<8
}

fn BePutU16(mut b: []byte, v: u16) {
    b[1] = byte(v)
    b[0] = byte(v >> 8)
}

fn BeAppendU16(mut b: []byte, v: u16): []byte {
    ret append(b,
        byte(v>>8),
        byte(v),
    )
}

fn BeU32(b: []byte): u32 {
    ret u32(b[0])<<24 | u32(b[1])<<16 | u32(b[2])<<8 | u32(b[3])
}

fn BePutU32(mut b: []byte, v: u32) {
    b[3] = byte(v)
    b[2] = byte(v >> 8)
    b[1] = byte(v >> 16)
    b[0] = byte(v >> 24)
}

fn BeAppendU32(mut b: []byte, v: u32): []byte {
    ret append(b,
        byte(v>>24),
        byte(v>>16),
        byte(v>>8),
        byte(v),
    )
}

fn BeU64(b: []byte): u64 {
    ret u64(b[7]) | u64(b[6])<<8 | u64(b[5])<<16 | u64(b[4])<<24 |
        u64(b[3])<<32 | u64(b[2])<<40 | u64(b[1])<<48 | u64(b[0])<<56
}

fn BePutU64(mut b: []byte, v: u64) {
    b[7] = byte(v)
    b[6] = byte(v >> 8)
    b[5] = byte(v >> 16)
    b[4] = byte(v >> 24)
    b[3] = byte(v >> 32)
    b[2] = byte(v >> 40)
    b[1] = byte(v >> 48)
    b[0] = byte(v >> 56)
}

fn BeAppendU64(mut b: []byte, v: u64): []byte {
    ret append(b,
        byte(v>>56),
        byte(v>>48),
        byte(v>>40),
        byte(v>>32),
        byte(v>>24),
        byte(v>>16),
        byte(v>>8),
        byte(v),
    )
}